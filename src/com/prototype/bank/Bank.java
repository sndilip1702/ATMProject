package com.prototype.bank;

import java.util.ArrayList;
import java.util.Random;

import com.prototype.atm.ATMConsole;
import com.prototype.customer.User;

/**
 * 
 * @author Dilip The authority that creates accounts and ATM's
 */
public class Bank {

	private String name;
	private ArrayList<User> users;
	private ArrayList<Account> accounts;
	private ArrayList<ATMConsole> machines;

	/**
	 * Constructor to initialize values
	 * 
	 * @param name
	 *            - name of the bank
	 */
	public Bank(String name) {
		this.name = name;
		// initialize users and accounts
		users = new ArrayList<User>();
		accounts = new ArrayList<Account>();
		machines = new ArrayList<ATMConsole>();
	}

	/**
	 * The function fetches the ATMConsole based on the index
	 * 
	 * @param index
	 *            - a number to fetch the corresponding console
	 * @return Console object
	 */
	public ATMConsole getConsole(int index) {
		if (index < this.machines.size()) {
			return this.machines.get(index);
		} else {
			return null;
		}
	}

	public void addConsole(ATMConsole newConsole) {
		this.machines.add(newConsole);
	}

	/**
	 * Adding a new User to the System and Opening an account
	 * 
	 * @param firstName
	 *            - User's firstname
	 * @param lastName
	 *            - User's lastname
	 * @param pin
	 *            - Secret PIN that is used for authentication
	 * @param accType
	 *            - The type of account to be opened
	 * @param startingBalance
	 *            - Optional starting balance for the account
	 * @return
	 */
	public User addUser(String firstName, String lastName, String pin, AccountType accType, double startingBalance) {
		User newUser = new User(firstName, lastName, pin, this);
		this.users.add(newUser);
		Account newAccount = new Account(accType, newUser, this, startingBalance);
		newUser.addAccount(newAccount);
		this.accounts.add(newAccount);
		return newUser;
	}

	/**
	 * Autogenerated ID's
	 * 
	 * @return a generated ID
	 */
	public String generateNewUserID() {
		String uuid = "";
		Random rnd = new Random();
		int length = 3;
		boolean unique = true;
		do {
			for (int i = 0; i < length; i++) {
				uuid += ((Integer) rnd.nextInt(length)).toString();
			}

			for (User u : users) {
				if (uuid.compareTo(u.getUuid()) == 0) {
					unique = false;
					break;
				} else {
					unique = true;
				}
			}
		} while (!unique);

		return uuid;
	}

	/**
	 * Autogenerated ID's
	 * 
	 * @return a generated ID
	 */
	public String generateNewATMID() {
		String uuid = "";
		Random rnd = new Random();
		int length = 5;
		boolean unique = true;
		do {
			for (int i = 0; i < length; i++) {
				uuid += ((Integer) rnd.nextInt(length)).toString();
			}

			for (ATMConsole m : machines) {
				if (uuid.compareTo(m.getUuid()) == 0) {
					unique = false;
					break;
				} else {
					unique = true;
				}
			}
		} while (!unique);

		return uuid;
	}

	/**
	 * Autogenerated ID's
	 * 
	 * @return a generated ID
	 */
	public String generateNewAccountID() {
		String uuid = "";
		Random rnd = new Random();
		int length = 6;
		boolean unique = true;
		do {
			for (int i = 0; i < length; i++) {
				uuid += ((Integer) rnd.nextInt(length)).toString();
			}

			for (Account a : accounts) {
				if (uuid.compareTo(a.getUuid()) == 0) {
					unique = false;
					break;
				} else {
					unique = true;
				}
			}
		} while (!unique);

		return uuid;
	}

	public void addAccount(Account newAccount) {
		this.accounts.add(newAccount);
	}

	/**
	 * User validation module
	 * 
	 * @param pin
	 *            - User secret PIN
	 * @return - A user object that contains information about a valid user
	 */
	public User userLogin(String pin) {
		for (User u : this.users) {
			// find user and validate PIN
			// to validate userID add --> u.getUuid().compareTo(userID) == 0
			if (u.validatePin(pin)) {
				return u;
			}
		}

		// if user not found
		return null;

	}

	public String getName() {
		return name;
	}
}
